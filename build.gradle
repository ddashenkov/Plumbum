buildscript {
    apply from: "./ext.gradle"

    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()

        maven {
            url = spineRepository
        }
        maven {
            url = spineSnapshotsRepository
        }
    }

    dependencies {
        classpath group: 'com.google.protobuf', name:'protobuf-gradle-plugin', version: protobufGradlePluginVersion
        classpath group: 'io.spine.tools', name: 'spine-model-compiler', version: spineToolsVersion
    }
}

allprojects {
    ext {
        sourcesRootDir = "$projectDir/src"
        genRootDir = "$projectDir/generated"
    }

    group 'edu.ddashenkov'
    version '1.0-SNAPSHOT'

    apply plugin: 'java'
    apply plugin: 'com.google.protobuf'
    apply plugin: 'io.spine.tools.spine-model-compiler'
    apply from: "$rootDir/ext.gradle"

    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            url = spineRepository
        }
        maven {
            url = spineSnapshotsRepository
        }
    }

    dependencies {
        testCompile group: 'junit', name: 'junit', version: '4.12'
    }

    sourceSets {
        main {
            proto.srcDirs = ["${sourcesRootDir}/main/proto"]
            java.srcDirs += [
                    "$genRootDir/main/java",
                    "$genRootDir/main/spine"
            ]
            resources.srcDirs += ["$genRootDir/main/resources"]
        }
        test {
            proto.srcDirs = ["${sourcesRootDir}/test/proto"]
            java.srcDirs += [
                    "$genRootDir/test/java",
                    "$genRootDir/test/spine"
            ]
            resources.srcDirs += ["$projectDir/generated/test/resources"]
        }
    }

    protobuf {
        generatedFilesBaseDir = "$projectDir/generated"
        generateProtoTasks {
            all().each { task ->
                task.generateDescriptorSet = true
                final def descPath = (task.sourceSet.name.contains("test")
                        ? project.extensions.getByName("modelCompiler").testDescriptorSetPath
                        : project.extensions.getByName("modelCompiler").mainDescriptorSetPath) ?:
                        "${projectDir}/build/descriptors/${task.sourceSet.name}.desc"
                task.descriptorSetOptions.path = descPath
                task.descriptorSetOptions.includeImports = true
                task.descriptorSetOptions.includeSourceInfo = true
            }
        }
    }
}
